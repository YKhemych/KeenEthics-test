{"version":3,"sources":["Tweet/Tweet.js","App.js","serviceWorker.js","index.js"],"names":["Tweet","props","react_default","a","createElement","className","user_name","screen_name","text","href","link","App","state","cars","searchTweets","screenName","document","querySelector","value","console","log","axios","get","concat","then","response","_this","setState","data","id","type","placeholder","onClick","this","map","tweet","index","retweeted_status","tweetText","full_text","trim","tweetLink","slice","indexOf","length","split","key","user","name","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRAEeA,SAAA,SAACC,GAAD,OACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,aAAKH,EAAMK,UAAX,SAA4BL,EAAMM,YAAlC,KACAL,EAAAC,EAAAC,cAAA,aAAKH,EAAMO,KAAX,IAAiBN,EAAAC,EAAAC,cAAA,KAAGK,KAAMR,EAAMS,MAAf,cAAjB,QCiDOC,6MA/CXC,MAAQ,CACJC,KAAM,MAGVC,aAAe,WACX,IAAIC,EAAaC,SAASC,cAAc,eAAeC,MACvDC,QAAQC,IAAIL,GACZM,IAAMC,IAAN,IAAAC,OAAcR,IACTS,KAAK,SAAAC,GACFC,EAAKC,SAAS,CAACd,KAAMY,EAASG,kFAUtC,OACI1B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOyB,GAAG,aAAaC,KAAK,OAAOzB,UAAU,QAAQ0B,YAAY,4BACjE7B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAAS2B,QAASC,KAAKnB,cAAzC,aAEJZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACT4B,KAAKrB,MAAMC,KAAKqB,IAAK,SAACC,EAAOC,GACxBD,EAAME,mBAAmBF,EAAQA,EAAME,kBAC1C,IAAIC,EAAYH,EAAMI,UAAUC,OAC5BC,EAAYH,EAAUI,MAAMJ,EAAUK,QAAQ,QAASL,EAAUM,QAEjE,OADAN,EAAYA,EAAUO,MAAM,QAAQ,GAEpC3C,EAAAC,EAAAC,cAACJ,EAAD,CACI8C,IAAKV,EACL9B,UAAW6B,EAAMY,KAAKC,KACtBzC,YAAa4B,EAAMY,KAAKxC,YACxBC,KAAM8B,EACN5B,KAAM+B,eAvCpBQ,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASzC,SAAS0C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.dff1e708.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default (props) => (\r\n    <div className=\"tweet_div\">\r\n        <p> {props.user_name}     @{props.screen_name} </p>\r\n        <p> {props.text} <a href={props.link}> see more </a> </p>\r\n    </div>\r\n\r\n\r\n\r\n)","import React, {Component} from 'react';\nimport axios from 'axios'\nimport './App.css';\nimport Tweet from './Tweet/Tweet'\n\nclass App extends Component{\n\n    state = {\n        cars: []\n    }\n\n    searchTweets = () =>{\n        let screenName = document.querySelector(\"#screenName\").value;\n        console.log(screenName);\n        axios.get(`/${screenName}`)\n            .then(response =>{\n                this.setState({cars: response.data});\n                // this.state.cars = response.data;\n                // console.log(response.data[2].text);\n                // console.log(response.data[2].user.name);\n                // console.log(response.data[2])\n\n            })\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"app\">\n                    <input id=\"screenName\" type=\"text\" className=\"input\" placeholder=\"Screen name of the user\" />\n                    <button className=\"button\" onClick={this.searchTweets}> Search </button>\n                </div>\n                <div className=\"tweets_div\">\n                    { this.state.cars.map( (tweet, index) =>{\n                        if(tweet.retweeted_status) {tweet = tweet.retweeted_status;}\n                        let tweetText = tweet.full_text.trim();\n                        let tweetLink = tweetText.slice(tweetText.indexOf(\"http\"), tweetText.length);\n                            tweetText = tweetText.split('http')[0];\n                            return (\n                            <Tweet\n                                key={index}\n                                user_name={tweet.user.name}\n                                screen_name={tweet.user.screen_name}\n                                text={tweetText}\n                                link={tweetLink}\n                            />\n                        )\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}